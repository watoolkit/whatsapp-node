"use strict";(self.webpackChunkwatsapp_node_sdk_docs=self.webpackChunkwatsapp_node_sdk_docs||[]).push([[653],{9624:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/error-handling","title":"Error Handling","description":"Learn how to handle errors in the SDK.","source":"@site/docs/guides/error-handling.md","sourceDirName":"guides","slug":"/guides/error-handling","permalink":"/whatsapp-node/docs/guides/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/watoolkit/whatsapp-node/tree/main/docs/docs/guides/error-handling.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Webhook Handling","permalink":"/whatsapp-node/docs/guides/webhook-handling"},"next":{"title":"API Reference","permalink":"/whatsapp-node/docs/api/"}}');var o=n(4848),s=n(8453);const a={sidebar_position:5},i="Error Handling",l={},d=[{value:"WhatsAppError",id:"whatsapperror",level:2},{value:"Common Errors",id:"common-errors",level:2},{value:"Authentication Errors",id:"authentication-errors",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Invalid Phone Numbers",id:"invalid-phone-numbers",level:3},{value:"Retry Strategy",id:"retry-strategy",level:2}];function c(r){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"error-handling",children:"Error Handling"})}),"\n",(0,o.jsx)(e.p,{children:"Learn how to handle errors in the SDK."}),"\n",(0,o.jsx)(e.h2,{id:"whatsapperror",children:"WhatsAppError"}),"\n",(0,o.jsxs)(e.p,{children:["The SDK throws ",(0,o.jsx)(e.code,{children:"WhatsAppError"})," for API-related errors:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { WhatsAppError } from '@watoolkit/whatsapp-node';\n\ntry {\n  await client.sendTextMessage('1234567890', 'Hello');\n} catch (error) {\n  if (error instanceof WhatsAppError) {\n    console.error('WhatsApp API error:', error.message);\n    console.error('Status code:', error.statusCode);\n    console.error('Error details:', error.details);\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"common-errors",children:"Common Errors"}),"\n",(0,o.jsx)(e.h3,{id:"authentication-errors",children:"Authentication Errors"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"try {\n  await client.sendTextMessage('1234567890', 'Hello');\n} catch (error) {\n  if (error instanceof WhatsAppError) {\n    if (error.statusCode === 401) {\n      console.error('Invalid access token');\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"try {\n  await client.sendTextMessage('1234567890', 'Hello');\n} catch (error) {\n  if (error instanceof WhatsAppError) {\n    if (error.statusCode === 429) {\n      console.error('Rate limit exceeded');\n      // Implement retry logic\n      const retryAfter = error.headers?.['retry-after'];\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"invalid-phone-numbers",children:"Invalid Phone Numbers"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"try {\n  await client.sendTextMessage('invalid_number', 'Hello');\n} catch (error) {\n  if (error instanceof WhatsAppError) {\n    if (error.details?.error?.code === 100) {\n      console.error('Invalid phone number');\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"retry-strategy",children:"Retry Strategy"}),"\n",(0,o.jsx)(e.p,{children:"Implement a retry strategy for transient errors:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { WhatsAppError } from '@watoolkit/whatsapp-node';\n\nasync function sendWithRetry(\n  fn: () => Promise<any>,\n  maxRetries = 3,\n  delay = 1000\n) {\n  let lastError: Error | null = null;\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (error instanceof WhatsAppError) {\n        // Don't retry client errors\n        if (error.statusCode < 500) {\n          throw error;\n        }\n        lastError = error;\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n        continue;\n      }\n      throw error;\n    }\n  }\n  \n  throw lastError;\n}\n\n// Usage\nawait sendWithRetry(() => \n  client.sendTextMessage('1234567890', 'Hello')\n);\n"})})]})}function h(r={}){const{wrapper:e}={...(0,s.R)(),...r.components};return e?(0,o.jsx)(e,{...r,children:(0,o.jsx)(c,{...r})}):c(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>a,x:()=>i});var t=n(6540);const o={},s=t.createContext(o);function a(r){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function i(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:a(r.components),t.createElement(s.Provider,{value:e},r.children)}}}]);